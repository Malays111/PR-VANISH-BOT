import asyncio
import html
import json
import logging
import requests
import random
import string
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import config
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    with open('data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_ref_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=7))

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
START_TEXT = """üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PR VANISH!</b>

<b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
<i>‚úÖ –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –∏ –±–æ—Ç—ã</i>
<i>‚úÖ –ü–æ–ª—É—á–∞—Ç—å –∂–∏–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>
<i>‚úÖ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–π —Ä–µ–∫–ª–∞–º–µ</i>

üìå <i>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∞–π—Ç–æ–≤!</i>

<b><i>–í—ã–±–∏—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.</i></b>"""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
def create_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"), InlineKeyboardButton(text="üì¢ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–∞—Ä", callback_data="pr")],
            [InlineKeyboardButton(text="–ú–æ–∏ –æ–ø", callback_data="my_subs"), InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )

def create_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    )

def create_pr_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", callback_data="pr_channel"), InlineKeyboardButton(text="–ì—Ä—É–ø–ø—É", callback_data="pr_group")],
            [InlineKeyboardButton(text="–ü–æ—Å—Ç", callback_data="pr_post"), InlineKeyboardButton(text="–ë–æ—Ç", callback_data="pr_bot")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def create_channel_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –î–µ–Ω—å", callback_data="channel_1d"), InlineKeyboardButton(text="1 –ù–µ–¥–µ–ª—è", callback_data="channel_1w"), InlineKeyboardButton(text="1 –ú–µ—Å—è—Ü", callback_data="channel_1m")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def create_payment_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_crypto"), InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å —Å VANISH", callback_data="pay_vanish")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def create_confirm_channel_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_channel"), InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_channel")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = create_main_keyboard()
back_keyboard = create_back_keyboard()
pr_keyboard = create_pr_keyboard()
channel_keyboard = create_channel_keyboard()
payment_keyboard = create_payment_keyboard()
confirm_channel_keyboard = create_confirm_channel_keyboard()

prices = {
    'channel': {
        '1d': {'usd': 7, 'vanish': 15, 'period': '1 –¥–µ–Ω—å'},
        '1w': {'usd': 15, 'vanish': 30, 'period': '1 –Ω–µ–¥–µ–ª—é'},
        '1m': {'usd': 50, 'vanish': 100, 'period': '1 –º–µ—Å—è—Ü'}
    },
    'group': {
        '1d': {'usd': 7, 'vanish': 15, 'period': '1 –¥–µ–Ω—å'},
        '1w': {'usd': 15, 'vanish': 30, 'period': '1 –Ω–µ–¥–µ–ª—é'},
        '1m': {'usd': 50, 'vanish': 100, 'period': '1 –º–µ—Å—è—Ü'}
    },
    'bot': {
        '1d': {'usd': 10, 'vanish': 20, 'period': '1 –¥–µ–Ω—å'},
        '1w': {'usd': 20, 'vanish': 40, 'period': '1 –Ω–µ–¥–µ–ª—é'},
        '1m': {'usd': 70, 'vanish': 140, 'period': '1 –º–µ—Å—è—Ü'}
    },
    'post': {
        '1d': {'usd': 8, 'vanish': 16, 'period': '1 –¥–µ–Ω—å'},
        '1w': {'usd': 12, 'vanish': 24, 'period': '1 –Ω–µ–¥–µ–ª—é'},
        '1m': {'usd': 35, 'vanish': 70, 'period': '1 –º–µ—Å—è—Ü'}
    }
}

async def check_payment(user_id, invoice_id, period, type_):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–æ–π VANISH"""
    logging.info(f"Starting payment check for user {user_id}, invoice {invoice_id}")
    start_time = asyncio.get_event_loop().time()

    # –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç—ã
    content_types = {
        'bot': ('–±–æ—Ç', "@myrentbot", "@myrentbot"),
        'post': ('–ø–æ—Å—Ç', "https://t.me/channel/123", "https://t.me/channel/123"),
        'channel': ('–∫–∞–Ω–∞–ª', "@mychannel", "@mychannel –∏–ª–∏ https://t.me/mychannel"),
        'group': ('–≥—Ä—É–ø–ø—É', "@mygroup", "@mygroup –∏–ª–∏ https://t.me/mygroup")
    }

    item_text, example, important_example = content_types.get(type_, ('–∫–æ–Ω—Ç–µ–Ω—Ç', "@example", "@example"))

    while asyncio.get_event_loop().time() - start_time < 180:  # 3 –º–∏–Ω—É—Ç—ã
        try:
            response = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.get(
                f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}",
                headers={"Crypto-Pay-API-Token": config.CRYPTOBOT_TOKEN}
            ))

            if response.status_code == 200:
                res = response.json()
                if res.get('ok') and res.get('result', {}).get('items'):
                    invoice_item = res['result']['items'][0]

                    if invoice_item.get('status') == 'paid':
                        logging.info(f"Payment successful for user {user_id}")
                        data = load_data()

                        if str(user_id) in data['users']:
                            msg_id = data['users'][str(user_id)]['message_id']

                            text = f"""‚úÖ –û–ø–ª–∞—Ç–∞ USDT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

üéâ –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à {html.escape(item_text)}

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>
‚Ä¢ {html.escape(example)}
‚Ä¢ {html.escape(important_example)}

‚ö†Ô∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ @username
‚Ä¢ https://t.me/username
‚Ä¢ http://t.me/username
‚Ä¢ t.me/username

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</i>"""

                            await send_or_edit_message(user_id, msg_id, text)
                            data['users'][str(user_id)]['current_screen'] = 'enter_channel'
                            data['users'][str(user_id)]['ad_period'] = period
                            data['users'][str(user_id)]['ad_type'] = type_
                            save_data(data)
                        break

            # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 1 –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(3)

        except Exception as e:
            logging.error(f"Error in check_payment: {e}")
            await asyncio.sleep(3)

    logging.info(f"Payment check timeout for user {user_id}, invoice {invoice_id}")

BALANCE_TEXT = """üí∞ <b>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å VANISH
—Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –±–æ—Ç–∞</b>

–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance} VANISH</b>

–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>t.me/{bot_username}?start={ref_code}</code>

<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏.
2. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–ø–∏—à–µ—Ç /start, –≤–∞–º –Ω–∞—á–∏—Å–ª—è—Ç—Å—è <b>0.1 VANISH</b>.
3. –î–µ–Ω—å–≥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç <i>–º–≥–Ω–æ–≤–µ–Ω–Ω–æ</i> –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∞."""

PR_TEXT = """üì¢ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–∞—Ä

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏–∞—Ä–∞:
1. –†–µ–∫–ª–∞–º–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö (10 –±–∞–ª–ª–æ–≤)
2. –†–µ–ø–æ—Å—Ç—ã (5 –±–∞–ª–ª–æ–≤)
3. –û–±–º–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (2 –±–∞–ª–ª–∞)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞."""

CHANNELS_TEXT = """üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã

–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:
{channels}

–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username"""

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ –±–∞–ª–∞–Ω—Å–µ

STATS_TEXT = """üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PR VANISH</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {users_today}
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:</b> {total_users}
üèòÔ∏è <b>–ì—Ä—É–ø–ø —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º:</b> {total_groups}

<i>–•–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é? –ó–∞–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>
üì¢ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –ø–∏–∞—Ä ‚Äî –∏ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"""

HELP_TEXT = """‚ùì –ü–æ–º–æ—â—å

<b>–õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
‚Ä¢ üì¢ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–∞—Ä - –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
‚Ä¢ üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):</b>
‚Ä¢ /setup @channel –≤—Ä–µ–º—è - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
  –ü—Ä–∏–º–µ—Ä: /setup @mychannel 1h
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /unsetup - –æ—Ç–≤—è–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ /unsetup @username - –æ—Ç–≤—è–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
  –ü—Ä–∏–º–µ—Ä: /unsetup @mychannel
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö)

<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø (–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö):</b>
‚Ä¢ /setup @group –≤—Ä–µ–º—è - –ø—Ä–∏–≤—è–∑–∞—Ç—å @likkerrochat –∫ –≥—Ä—É–ø–ø–µ
  –ü—Ä–∏–º–µ—Ä: /setup t.me/mygroup 1d

<i>–í—Ä–µ–º—è: 1h, 6h, 12h, 1d, 3d, 7d</i>"""

ADMIN_TEXT = """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

–ö–æ–º–∞–Ω–¥—ã:
 /ban (@username) 1d - –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
 /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
 /give (@username) (—Å—É–º–º–∞) - –≤—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å
 /addadmin (user_id) - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
 /rassil - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (–±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
 /stoprassil - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
 /removeall - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É."""

admin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –¥–∞–Ω–Ω—ã—Ö
keyboard_cache = {}
data_cache = None
data_cache_time = 0
CACHE_TTL = 30  # 30 —Å–µ–∫—É–Ω–¥

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_cached_keyboard(key, keyboard_func):
    if key not in keyboard_cache:
        keyboard_cache[key] = keyboard_func()
    return keyboard_cache[key]

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def load_data():
    global data_cache, data_cache_time
    current_time = asyncio.get_event_loop().time()

    if data_cache is None or (current_time - data_cache_time) > CACHE_TTL:
        try:
            with open('data.json', 'r', encoding='utf-8') as f:
                data_cache = json.load(f)
                data_cache_time = current_time
        except FileNotFoundError:
            # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            data_cache = {
                'users': {},
                'groups': {},
                'admins': [],
                'stats': {'total_users': 0, 'total_channels': 0, 'total_balance': 0, 'users_today': 0, 'last_reset_date': date.today().isoformat()}
            }
            save_data(data_cache)

        # –°–±—Ä–æ—Å users_today –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        today = date.today().isoformat()
        if 'last_reset_date' not in data_cache['stats'] or data_cache['stats']['last_reset_date'] != today:
            data_cache['stats']['users_today'] = 0
            data_cache['stats']['last_reset_date'] = today
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open('data.json', 'w', encoding='utf-8') as f:
                json.dump(data_cache, f, ensure_ascii=False, indent=4)

    return data_cache

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    global data_cache, data_cache_time
    try:
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
        data_cache = data
        data_cache_time = asyncio.get_event_loop().time()
    except Exception as e:
        logging.error(f"Error saving data: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
async def send_or_edit_message(chat_id, message_id, text, photo_url=config.PHOTO_URL, reply_markup=None, parse_mode=None, force_edit=False):
    try:
        if message_id and not force_edit:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=text, parse_mode=parse_mode)
                if reply_markup:
                    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=reply_markup)
                return message_id
            except Exception as e:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                logging.warning(f"Failed to edit message {message_id}: {e}")
                pass

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL
            msg = await bot.send_photo(chat_id=chat_id, photo=photo_url, caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as e1:
            try:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                response = requests.get(photo_url)
                if response.status_code == 200:
                    from aiogram.types import BufferedInputFile
                    photo_file = BufferedInputFile(response.content, filename="photo.jpg")
                    msg = await bot.send_photo(chat_id=chat_id, photo=photo_file, caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
                else:
                    # –ë–µ–∑ —Ñ–æ—Ç–æ
                    msg = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception as e2:
                logging.error(f"Failed to send message: {e1}, {e2}")
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ
                msg = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)

        return msg.message_id
    except Exception as e:
        logging.error(f"Error in send_or_edit_message: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        return msg.message_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
def add_balance(user_id, amount):
    data = load_data()
    if user_id not in data['users']:
        return

    old_balance = data['users'][user_id]['balance']
    data['users'][user_id]['balance'] = old_balance + amount
    data['stats']['total_balance'] += amount

    # –†–µ—Ñ–µ—Ä–∞–ª
    referrer = data['users'][user_id].get('referrer')
    if referrer and referrer in data['users']:
        ref_bonus = amount * 0.2  # 20% –æ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
        if ref_bonus > 0:
            data['users'][referrer]['balance'] += ref_bonus
            data['users'][referrer]['earned'] += ref_bonus
            data['users'][referrer]['referrals'] += 1
            data['stats']['total_balance'] += ref_bonus

    save_data(data)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start
@dp.message(Command("start"))
async def start_command(message: Message):
    data = load_data()
    user_id = message.from_user.id
    today = date.today().isoformat()
    if str(user_id) not in data['users']:
        ref_code = generate_ref_code()
        data['users'][str(user_id)] = {
            'balance': 0,
            'referrer': None,
            'channels': [],
            'message_id': None,
            'referrals': 0,
            'earned': 0,
            'ref_code': ref_code,
            'username': message.from_user.username.lower() if message.from_user.username else None,
            'last_seen_date': today
        }
        data['stats']['total_users'] += 1
        data['stats']['users_today'] += 1
        save_data(data)
    else:
        # –î–æ–±–∞–≤–∏—Ç—å ref_code –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'ref_code' not in data['users'][str(user_id)]:
            data['users'][str(user_id)]['ref_code'] = generate_ref_code()
        # –û–±–Ω–æ–≤–∏—Ç—å username
        data['users'][str(user_id)]['username'] = message.from_user.username.lower() if message.from_user.username else None
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å last_seen_date
        if data['users'][str(user_id)].get('last_seen_date') != today:
            data['stats']['users_today'] += 1
            data['users'][str(user_id)]['last_seen_date'] = today
        save_data(data)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    args = message.text.split()
    if len(args) > 1:
        ref_code = args[1]
        referrer_id = None
        for uid, info in data['users'].items():
            if info.get('ref_code') == ref_code:
                referrer_id = uid
                break
        if referrer_id and referrer_id != str(user_id):
            data['users'][str(user_id)]['referrer'] = referrer_id
            # –ù–∞—á–∏—Å–ª–∏—Ç—å 0.1 VANISH —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            data['users'][referrer_id]['balance'] += 0.1
            data['users'][referrer_id]['earned'] += 0.1
            data['users'][referrer_id]['referrals'] += 1
            data['stats']['total_balance'] += 0.1
            save_data(data)
    
    msg_id = await send_or_edit_message(message.chat.id, None, START_TEXT, reply_markup=main_keyboard, parse_mode="HTML")
    data['users'][str(user_id)]['message_id'] = msg_id
    save_data(data)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
@dp.message(Command("setup"))
async def setup_command(message: Message):
    args = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(args) < 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\nüìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/setup @channel_or_group –≤—Ä–µ–º—è\n\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ /setup @mychannel 1h (–≤ –≥—Ä—É–ø–ø–µ - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ)\n‚Ä¢ /setup t.me/mygroup 1d (–≤ –ª–∏—á–Ω—ã—Ö - –ø—Ä–∏–≤—è–∑–∞—Ç—å @likkerrochat –∫ –≥—Ä—É–ø–ø–µ)\n\n‚è∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</b>\n1h, 6h, 12h, 1d, 3d, 7d", parse_mode="HTML")
        return

    channel_or_group = args[1]
    time_str = args[2]

    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    def parse_time(time_str):
        if time_str.lower() == 'never':
            return None  # –ë–µ—Å—Å—Ä–æ—á–Ω–æ–µ
        if time_str.endswith('h'):
            try:
                hours = int(time_str[:-1])
                return hours
            except ValueError:
                return False
        elif time_str.endswith('d'):
            try:
                days = int(time_str[:-1])
                return days * 24
            except ValueError:
                return False
        else:
            return False

    hours = parse_time(time_str)
    if hours is False:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\nüìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ 3h - 3 —á–∞—Å–∞\n‚Ä¢ 1d - 1 –¥–µ–Ω—å\n‚Ä¢ 5d - 5 –¥–Ω–µ–π\n‚Ä¢ never - –±–µ—Å—Å—Ä–æ—á–Ω–æ–µ\n\nüìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n/setup @mychannel 1d", parse_mode="HTML")
        return

    if message.chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–µ: channel_or_group - –∫–∞–Ω–∞–ª, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
        channel = channel_or_group

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
        if channel.startswith('t.me/'):
            channel = '@' + channel.replace('t.me/', '')
        elif channel.startswith('https://t.me/') or channel.startswith('http://t.me/'):
            channel = '@' + channel.split('/')[-1]
        elif not channel.startswith('@'):
            channel = '@' + channel

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
        try:
            channel_username = channel[1:]  # –£–±–∏—Ä–∞–µ–º @
            channel_info = await bot.get_chat(f"@{channel_username}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
            user_member = await bot.get_chat_member(channel_info.id, message.from_user.id)
            if not user_member.status in ['administrator', 'creator']:
                await message.reply(f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {channel} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º.\n\nüí° <b>–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> –≤ –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            try:
                bot_member = await bot.get_chat_member(channel_info.id, bot.id)
                if bot_member.status not in ['administrator', 'creator']:
                    await message.reply(f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!</b>\n\nü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\nüí° <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>.", parse_mode="HTML")
                    return
            except Exception as e:
                await message.reply(f"‚ùå <b>–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!</b>\n\nüö´ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\nüí° <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>.", parse_mode="HTML")
                return

        except Exception as e:
            await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!</b>\n\nüö´ –ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.\n\nüí° <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</b>\n‚Ä¢ –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", parse_mode="HTML")
            return

        # –ì—Ä—É–ø–ø–∞ - —Ç–µ–∫—É—â–∞—è
        target_group_id = str(message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if not bot_member.status in ['administrator', 'creator']:
            await message.reply("‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!</b>\n\nü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\nüí° <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã</b> —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.", parse_mode="HTML")
            return

        if hours is None:
            success_message = f"‚úÖ –ö–∞–Ω–∞–ª {channel} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞."
        else:
            success_message = f"‚úÖ –ö–∞–Ω–∞–ª {channel} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ {time_str}."

    else:
        # –í –ª–∏—á–Ω—ã—Ö: channel_or_group - –≥—Ä—É–ø–ø–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º @likkerrochat –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        group = channel_or_group

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã
        if group.startswith('t.me/'):
            group = '@' + group.replace('t.me/', '')
        elif group.startswith('https://t.me/') or group.startswith('http://t.me/'):
            group = '@' + group.split('/')[-1]
        elif not group.startswith('@'):
            group = '@' + group

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É
        try:
            group_username = group[1:]  # –£–±–∏—Ä–∞–µ–º @
            group_info = await bot.get_chat(f"@{group_username}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
            if group_info.type not in ['group', 'supergroup']:
                await message.reply(f"‚ùå <b>{group} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π!</b>\n\nüö´ –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∞ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –±–æ—Ç–∞.\n\nüí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n‚Ä¢ @groupname\n‚Ä¢ t.me/groupname", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            user_member = await bot.get_chat_member(group_info.id, message.from_user.id)
            if user_member.status not in ['administrator', 'creator']:
                await message.reply(f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã {group} –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\nüí° <b>–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
            bot_member = await bot.get_chat_member(group_info.id, bot.id)
            if not bot_member.status in ['administrator', 'creator']:
                await message.reply(f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!</b>\n\nü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {group} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\nüí° <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã</b> —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.", parse_mode="HTML")
                return

        except Exception as e:
            await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ!</b>\n\nüö´ –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.\n\nüí° <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</b>\n‚Ä¢ –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", parse_mode="HTML")
            return

        # –ö–∞–Ω–∞–ª - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π @likkerrochat
        channel = '@likkerrochat'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª @likkerrochat
        try:
            channel_info = await bot.get_chat(channel)
            bot_member = await bot.get_chat_member(channel_info.id, bot.id)
            if bot_member.status not in ['administrator', 'creator']:
                await message.reply("‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ @likkerrochat!</b>\n\nü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª @likkerrochat –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", parse_mode="HTML")
                return
        except Exception as e:
            await message.reply("‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @likkerrochat!</b>\n\nüö´ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")
            return

        target_group_id = str(group_info.id)

        if hours is None:
            success_message = f"‚úÖ –ö–∞–Ω–∞–ª @likkerrochat –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ {group} —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞."
        else:
            success_message = f"‚úÖ –ö–∞–Ω–∞–ª @likkerrochat –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ {group} —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ {time_str}."

    # –°–æ–∑–¥–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if hours is None:
        expiry = None
    else:
        expiry = datetime.now() + timedelta(hours=hours)

    data = load_data()
    if target_group_id not in data['groups']:
        data['groups'][target_group_id] = {'channels': {}, 'bots': {}}

    data['groups'][target_group_id]['channels'][channel] = {'expiry': expiry.isoformat() if expiry else None, 'people': 0}

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å @likkerrochat –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    if message.chat.type in ['group', 'supergroup']:
        if '@likkerrochat' not in data['groups'][target_group_id]['channels']:
            data['groups'][target_group_id]['channels']['@likkerrochat'] = {'expiry': None, 'people': 0}

    save_data(data)
    await message.reply(success_message, parse_mode="HTML")

@dp.message(Command("status"))
async def status_command(message: Message):
    # –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    if message.from_user.id == config.ADMIN_ID:
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    elif message.chat.type in ['group', 'supergroup']:
        try:
            user_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if user_member.status not in ['administrator', 'creator']:
                await message.reply("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.\n\nüí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.", parse_mode="HTML")
                return
        except Exception as e:
            await message.reply("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML")
            return

    data = load_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if message.chat.type in ['group', 'supergroup']:
        target_group_id = str(message.chat.id)
        context = "–≥—Ä—É–ø–ø–µ"

        # –ì—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if target_group_id not in data['groups'] or not data['groups'][target_group_id]['channels']:
            await message.reply("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\nüí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n/setup @username –≤—Ä–µ–º—è\n\nüìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n/setup @mychannel 1d", parse_mode="HTML")
            return

        status_text = "üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b>\n\n"
        for channel, info in data['groups'][target_group_id]['channels'].items():
            if info['expiry']:
                expiry = datetime.fromisoformat(info['expiry'])
                expiry_str = expiry.strftime('%Y-%m-%d %H:%M')
            else:
                expiry_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"
            status_text += f"üìå {channel}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_str}, –ª—é–¥–µ–π: {info['people']}\n"
        await message.reply(status_text, parse_mode="HTML")
    else:
        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = []
        for gid, group_info in data['groups'].items():
            for channel in group_info['channels'].keys():
                if channel.startswith('@'):
                    try:
                        channel_info = await bot.get_chat(channel)
                        member = await bot.get_chat_member(channel_info.id, message.from_user.id)
                        if member.status in ['administrator', 'creator']:
                            user_channels.extend([(channel, info) for channel, info in group_info['channels'].items() if channel == channel])
                    except:
                        continue

        if not user_channels:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏.\n\nüí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n/setup @username –≤—Ä–µ–º—è", parse_mode="HTML")
            return

        status_text = "üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
        for channel, info in user_channels:
            expiry = datetime.fromisoformat(info['expiry'])
            status_text += f"üìå {channel}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry.strftime('%Y-%m-%d %H:%M')}, –ª—é–¥–µ–π: {info['people']}\n"
        await message.reply(status_text, parse_mode="HTML")

@dp.message(Command("ban"))
async def ban_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\nüìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/ban @username –≤—Ä–µ–º—è\n\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ /ban @username 1d\n‚Ä¢ /ban @baduser 3d\n\n‚è∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</b>\n1d, 3d, 7d", parse_mode="HTML")
        return
    target = args[1]
    duration = args[2]
    try:
        data = load_data()
        target_user_id = None
        if target.startswith('@'):
            username = target[1:].lower()
            for uid, info in data['users'].items():
                if info.get('username') == username:
                    target_user_id = uid
                    break
        else:
            target_user_id = target
        if target_user_id and target_user_id in data['users']:
            ban_until = datetime.now() + timedelta(days=1)  # 1d
            data['users'][target_user_id]['banned_until'] = ban_until.isoformat()
            save_data(data)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å.")
        else:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

@dp.message(Command("stats"))
async def stats_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    data = load_data()
    stats = data['stats']
    text = f"""–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('users_today', 0)}
–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['total_channels']}
–û–±–æ—Ä–æ—Ç –±–∞–ª–ª–æ–≤: {stats['total_balance']}"""
    await message.reply(text)

@dp.message(Command("addadmin"))
async def addadmin_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    args = message.text.split()
    if len(args) != 2:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\nüìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/addadmin user_id\n\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ /addadmin 123456789\n‚Ä¢ /addadmin 987654321\n\nüí° <b>user_id</b> - —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram", parse_mode="HTML")
        return
    try:
        admin_id = int(args[1])
        data = load_data()
        if admin_id not in data['admins']:
            data['admins'].append(admin_id)
            save_data(data)
            await message.reply(f"‚úÖ –ê–¥–º–∏–Ω {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω")
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("give"))
async def give_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\nüìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/give @username —Å—É–º–º–∞\n\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ /give @user 100\n‚Ä¢ /give @testuser 500\n\nüí∞ <b>–°—É–º–º–∞ –≤ VANISH</b>", parse_mode="HTML")
        return
    target = args[1]
    amount = args[2]
    try:
        amount = int(amount)
        data = load_data()
        target_user_id = None
        if target.startswith('@'):
            username = target[1:].lower()
            logging.info(f"Searching for username: {username}")
            for uid, info in data['users'].items():
                logging.info(f"User {uid}: {info.get('username')}")
                if info.get('username') == username:
                    target_user_id = uid
                    break
        else:
            target_user_id = target
        if target_user_id and target_user_id in data['users']:
            data['users'][target_user_id]['balance'] += amount
            data['stats']['total_balance'] += amount
            logging.info(f"Updated balance for {target_user_id} to {data['users'][target_user_id]['balance']}")
            save_data(data)
            logging.info("Data saved after give command")
            await message.reply(f"–í—ã–¥–∞–Ω–æ {amount} VANISH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")
        else:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

@dp.message(Command("removeall"))
async def removeall_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    data = load_data()
    count = 0
    for uid in data['users']:
        if 'active_ads' in data['users'][uid]:
            count += len(data['users'][uid]['active_ads'])
            data['users'][uid]['active_ads'] = []
    save_data(data)
    await message.reply(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("rassil"))
async def rassil_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    data = load_data()
    data['waiting_for_broadcast'] = True
    save_data(data)
    await message.reply("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", parse_mode="HTML")

@dp.message(Command("stoprassil"))
async def stoprassil_command(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    data = load_data()
    if 'broadcast_message' in data:
        del data['broadcast_message']
        save_data(data)
        await message.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", parse_mode="HTML")
    else:
        await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", parse_mode="HTML")

@dp.message(Command("unsetup"))
async def unsetup_command(message: Message):
    # –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    if message.from_user.id == config.ADMIN_ID:
        pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    elif message.chat.type in ['group', 'supergroup']:
        try:
            user_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            logging.info(f"User member object: {user_member}")
            logging.info(f"User {message.from_user.id} status in group {message.chat.id}: {user_member.status}")
            if user_member.status not in ['administrator', 'creator']:
                await message.reply("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.\n\nüí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã</b> –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤.", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
            bot_member = await bot.get_chat_member(message.chat.id, bot.id)
            if not bot_member.status in ['administrator', 'creator']:
                await message.reply("‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!</b>\n\nü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\nüí° <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã</b> —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.", parse_mode="HTML")
                return
        except Exception as e:
            logging.error(f"Error checking rights: {e}")
            await message.reply("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML")
            return

    args = message.text.split()
    data = load_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–≤—è–∑–∫–∏
    if message.chat.type in ['group', 'supergroup']:
        target_group_id = str(message.chat.id)
        group_context = "–≥—Ä—É–ø–ø–µ"
    else:
        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞
        if len(args) < 2:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤—è–∑–∫–∏!\n\nüìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/unsetup @username\n\nüìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n/unsetup @mychannel", parse_mode="HTML")
            return

        channel = args[1]
        if not channel.startswith('@'):
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
            return

        try:
            channel_username = channel[1:]
            channel_info = await bot.get_chat(f"@{channel_username}")
            user_member = await bot.get_chat_member(channel_info.id, message.from_user.id)
            if not user_member.status in ['administrator', 'creator']:
                await message.reply(f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {channel}.\n\nüí° <b>–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> –≤ –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")
                return

            target_group_id = str(channel_info.id)
            group_context = "–∫–∞–Ω–∞–ª–µ"
        except Exception as e:
            await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!</b>\n\nüö´ –ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.", parse_mode="HTML")
            return

    if target_group_id not in data['groups']:
        await message.reply(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ {group_context}.")
        return

    if len(args) == 1:
        # –û—Ç–≤—è–∑–∞—Ç—å –≤—Å–µ
        channels_count = len(data['groups'][target_group_id]['channels'])
        data['groups'][target_group_id]['channels'] = {}
        save_data(data)
        await message.reply(f"‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç —ç—Ç–æ–≥–æ {group_context}!\n\nüìä <b>–û—Ç–≤—è–∑–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {channels_count}", parse_mode="HTML")
    else:
        channel = args[1]
        if channel in data['groups'][target_group_id]['channels']:
            del data['groups'][target_group_id]['channels'][channel]
            save_data(data)
            await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —ç—Ç–æ–≥–æ {group_context}!")
        else:
            await message.reply(f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–∫–∞—Ö —ç—Ç–æ–≥–æ {group_context}.\n\nüí° <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:</b>\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username\n‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤", parse_mode="HTML")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
        @dp.message(Command("channel_status"))
        async def channel_status_command(message: Message):
            if message.chat.type not in ['private']:
                return
        
            args = message.text.split()
            if len(args) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\nüìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/channel_status @username\n\nüìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n/channel_status @mychannel", parse_mode="HTML")
                return
        
            channel = args[1]
            if not channel.startswith('@'):
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
                return
        
            try:
                channel_username = channel[1:]
                channel_info = await bot.get_chat(f"@{channel_username}")
        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
                user_member = await bot.get_chat_member(channel_info.id, message.from_user.id)
                if not user_member.status in ['administrator', 'creator']:
                    await message.reply(f"‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {channel}.")
                    return
        
                data = load_data()
                channel_id = str(channel_info.id)
        
                if channel_id not in data['groups'] or not data['groups'][channel_id]['channels']:
                    await message.reply(f"üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel}:</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫ –≥—Ä—É–ø–ø–∞–º.", parse_mode="HTML")
                    return
        
                status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel}:</b>\n\n"
                for group_channel, info in data['groups'][channel_id]['channels'].items():
                    if info['expiry']:
                        expiry = datetime.fromisoformat(info['expiry'])
                        expiry_str = expiry.strftime('%Y-%m-%d %H:%M')
                    else:
                        expiry_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"
                    status_text += f"üìå –ü—Ä–∏–≤—è–∑–∞–Ω: –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_str}, –ª—é–¥–µ–π: {info['people']}\n"
        
                await message.reply(status_text, parse_mode="HTML")
        
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel}.\n\nüí° <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</b>\n‚Ä¢ –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞", parse_mode="HTML")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
        @dp.message(Command("unsetup_channel"))
        async def unsetup_channel_command(message: Message):
            if message.chat.type not in ['private']:
                return
        
            args = message.text.split()
            if len(args) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤—è–∑–∫–∏!\n\nüìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/unsetup_channel @username\n\nüìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n/unsetup_channel @mychannel", parse_mode="HTML")
                return
        
            channel = args[1]
            if not channel.startswith('@'):
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
                return
        
            try:
                channel_username = channel[1:]
                channel_info = await bot.get_chat(f"@{channel_username}")
        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
                user_member = await bot.get_chat_member(channel_info.id, message.from_user.id)
                if not user_member.status in ['administrator', 'creator']:
                    await message.reply(f"‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {channel}.")
                    return
        
                data = load_data()
                channel_id = str(channel_info.id)
        
                if channel_id not in data['groups'] or not data['groups'][channel_id]['channels']:
                    await message.reply(f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫.")
                    return
        
                channels_count = len(data['groups'][channel_id]['channels'])
                data['groups'][channel_id]['channels'] = {}
                save_data(data)
        
                await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø!\n\nüìä <b>–û—Ç–≤—è–∑–∞–Ω–æ –æ—Ç –≥—Ä—É–ø–ø:</b> {channels_count}", parse_mode="HTML")
        
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel}.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è callback
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = load_data()
    user_id = str(callback.from_user.id)
    if user_id not in data['users']:
        return

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω
    banned_until = data['users'][user_id].get('banned_until')
    if banned_until and datetime.fromisoformat(banned_until) > datetime.now():
        return

    msg_id = data['users'][user_id]['message_id']
    cb_data = callback.data

    if cb_data == "back":
        await send_or_edit_message(callback.message.chat.id, msg_id, START_TEXT, reply_markup=main_keyboard, parse_mode="HTML")
    elif cb_data == "balance":
        balance = data['users'][user_id]['balance']
        logging.info(f"Showing balance for {user_id}: {balance}")
        ref_code = data['users'][user_id]['ref_code']
        bot_username = (await bot.get_me()).username
        await send_or_edit_message(callback.message.chat.id, msg_id, BALANCE_TEXT.format(balance=balance, bot_username=bot_username, ref_code=ref_code), reply_markup=back_keyboard, parse_mode="HTML")
        data['users'][user_id]['current_screen'] = 'balance'
        save_data(data)
    elif cb_data == "pr":
        balance = data['users'][user_id]['balance']
        text = f"""<b>üì¢ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å?</b>

üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} VANISH

üöÄ <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã –∏ —É–≤–µ–ª–∏—á—å—Ç–µ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é!</i>"""
        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=pr_keyboard, parse_mode="HTML")
        data['users'][user_id]['current_screen'] = 'pr'
        save_data(data)
    elif cb_data in ["pr_channel", "pr_group", "pr_post", "pr_bot"]:
        type_map = {
            "pr_channel": ("channel", "–ö–ê–ù–ê–õ", "7$", "15$", "50$", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞—à –ö–ê–ù–ê–õ"),
            "pr_group": ("group", "–ì–†–£–ü–ü–£", "7$", "15$", "50$", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞—à—É –ì–†–£–ü–ü–£"),
            "pr_post": ("post", "–ü–û–°–¢", "8$", "12$", "35$", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–∞—à –ü–û–°–¢"),
            "pr_bot": ("bot", "–ë–û–¢", "10$", "20$", "70$", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞—à –ë–û–¢ \n–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ /start")
        }

        type_, item_upper, price_1d, price_1w, price_1m, description = type_map[cb_data]

        text = f"""<b>üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>

<b>üí∞ –ü—Ä–∞–π—Å—ã:</b>
‚Ä¢ 1 –î–µ–Ω—å - {price_1d}
‚Ä¢ 1 –ù–µ–¥–µ–ª—è - {price_1w}
‚Ä¢ 1 –ú–µ—Å—è—Ü - {price_1m}

<i>üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç? –í—Å–µ —É –∫–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—à –±–æ—Ç, –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {description}</i>

<b>üìù –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏:</b>
‚Ä¢ –î–ª—è –∫–∞–Ω–∞–ª–∞: <code>@username</code> –∏–ª–∏ <code>https://t.me/username</code>
‚Ä¢ –î–ª—è –≥—Ä—É–ø–ø—ã: <code>@groupname</code> –∏–ª–∏ <code>https://t.me/groupname</code>
‚Ä¢ –î–ª—è –±–æ—Ç–∞: <code>@botname</code> –∏–ª–∏ <code>https://t.me/botname</code>
‚Ä¢ –î–ª—è –ø–æ—Å—Ç–∞: <code>https://t.me/channel/123</code>"""

        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=channel_keyboard, parse_mode="HTML")
        data['users'][user_id]['current_screen'] = 'channel_pr'
        data['users'][user_id]['selected_type'] = type_
        save_data(data)
    elif cb_data in ["channel_1d", "channel_1w", "channel_1m"]:
        period = cb_data.split('_')[1]
        if 'selected_type' not in data['users'][user_id]:
            try:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã.")
            except:
                pass
            return
        type_ = data['users'][user_id]['selected_type']
        data['users'][user_id]['selected_period'] = period
        p = prices[type_][period]
        type_text = {'channel': '–∫–∞–Ω–∞–ª–∞', 'group': '–≥—Ä—É–ø–ø—ã', 'bot': '–±–æ—Ç–∞', 'post': '–ø–æ—Å—Ç–∞'}[type_]
        text = f"""üí≥ –°–æ–∑–¥–∞–Ω —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É

üìã –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
‚Ä¢ –°—É–º–º–∞: {p['usd']} USTD
‚Ä¢ –°—É–º–º–∞ VANISH: {p['vanish']}
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–∞: 3 –º–∏–Ω—É—Ç—ã
‚Ä¢ –°–µ—Ä–≤–∏—Å: —Ä–µ–∫–ª–∞–º–∞ {type_text} –Ω–∞ {p['period']}
‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã..."""
        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=payment_keyboard)
        data['users'][user_id]['current_screen'] = 'payment'
        save_data(data)
    elif cb_data == "pay_crypto":
        try:
            try:
                await callback.answer()
            except:
                pass
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
            logging.info(f"Callback answer error (old query): {e}")
        if 'selected_period' not in data['users'][user_id] or 'selected_type' not in data['users'][user_id]:
            try:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥.")
            except:
                pass
            return
        period = data['users'][user_id]['selected_period']
        type_ = data['users'][user_id]['selected_type']
        p = prices[type_][period]
        type_text = {'channel': '–∫–∞–Ω–∞–ª–∞', 'group': '–≥—Ä—É–ø–ø—ã', 'bot': '–±–æ—Ç–∞', 'post': '–ø–æ—Å—Ç–∞'}[type_]
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å "–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞..."
        temp_text = f"""üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É...

üìã –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
‚Ä¢ –°—É–º–º–∞: {p['usd']} USTD
‚Ä¢ –°—É–º–º–∞ VANISH: {p['vanish']}
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–∞: 3 –º–∏–Ω—É—Ç—ã
‚Ä¢ –°–µ—Ä–≤–∏—Å: —Ä–µ–∫–ª–∞–º–∞ {type_text} –Ω–∞ {p['period']}
‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."""
        await send_or_edit_message(callback.message.chat.id, msg_id, temp_text, reply_markup=None)
        # Test API
        test_url = "https://pay.crypt.bot/api/getMe"
        test_response = requests.get(test_url, headers={"Crypto-Pay-API-Token": config.CRYPTOBOT_TOKEN})
        logging.info(f"getMe response: {test_response.status_code} {test_response.text}")
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {"Crypto-Pay-API-Token": config.CRYPTOBOT_TOKEN, "Content-Type": "application/json"}
        payload = {
            "asset": "USDT",
            "amount": str(p['usd']),
            "description": f"–†–µ–∫–ª–∞–º–∞ {type_text} –Ω–∞ {p['period']}",
            "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
            "paid_btn_name": "openBot",
            "paid_btn_url": f"https://t.me/{(await bot.get_me()).username}"
        }
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        logging.info(f"Payload: {payload}")
        logging.info(f"Response status: {response.status_code}")
        logging.info(f"Response: {response.text}")
        if response.status_code == 200:
            res = response.json()
            if res['ok']:
                invoice_id = res['result']['invoice_id']
                pay_url = res['result']['bot_invoice_url']  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot_invoice_url –≤–º–µ—Å—Ç–æ pay_url
                data['users'][user_id]['invoice_id'] = invoice_id
                payment_keyboard_with_url = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url), InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å —Å VANISH", callback_data="pay_vanish")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
                    ]
                )
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å text
                text = f"""üí≥ –°–æ–∑–¥–∞–Ω —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É

üìã –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
‚Ä¢ –°—É–º–º–∞: {p['usd']} USTD
‚Ä¢ –°—É–º–º–∞ VANISH: {p['vanish']}
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–∞: 3 –º–∏–Ω—É—Ç—ã
‚Ä¢ –°–µ—Ä–≤–∏—Å: —Ä–µ–∫–ª–∞–º–∞ {type_text} –Ω–∞ {p['period']}
‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...
–û–±–Ω–æ–≤–ª–µ–Ω–æ: {int(asyncio.get_event_loop().time())}"""
                await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=payment_keyboard_with_url)
                save_data(data)
                # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
                asyncio.create_task(check_payment(int(user_id), invoice_id, period, type_))
            else:
                try:
                    await callback.answer(f"–û—à–∏–±–∫–∞: {res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except:
                    pass
        else:
            try:
                await callback.answer(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            except:
                pass
    elif cb_data == "pay_vanish":
        if 'selected_period' not in data['users'][user_id] or 'selected_type' not in data['users'][user_id]:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥.")
            return
        period = data['users'][user_id]['selected_period']
        type_ = data['users'][user_id]['selected_type']
        p = prices[type_][period]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if data['users'][user_id]['balance'] < p['vanish']:
            try:
                await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VANISH! –ù—É–∂–Ω–æ: {p['vanish']}, –£ –≤–∞—Å: {data['users'][user_id]['balance']}")
            except:
                pass
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        data['users'][user_id]['balance'] -= p['vanish']
        data['stats']['total_balance'] -= p['vanish']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã
        item_text = {'channel': '–∫–∞–Ω–∞–ª', 'group': '–≥—Ä—É–ø–ø—É', 'bot': '–±–æ—Ç–∞', 'post': '–ø–æ—Å—Ç'}[type_]
        examples = {
            'post': ("https://t.me/channel/123", "http://t.me/channel/123"),
            'bot': ("@myrentbot", "@myrentbot –∏–ª–∏ https://t.me/myrentbot"),
            'channel': ("@mychannel", "@mychannel –∏–ª–∏ https://t.me/mychannel"),
            'group': ("@mygroup", "@mygroup –∏–ª–∏ https://t.me/mygroup")
        }
        example, important_example = examples.get(type_, ("@example", "@example"))

        text = f"""‚úÖ –û–ø–ª–∞—Ç–∞ VANISH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

üí∞ –°–ø–∏—Å–∞–Ω–æ: {p['vanish']} VANISH
üí≥ –û—Å—Ç–∞—Ç–æ–∫: {data['users'][user_id]['balance']} VANISH

üéâ –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à {html.escape(item_text)}

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>
‚Ä¢ {html.escape(example)}
‚Ä¢ {html.escape(important_example)}

‚ö†Ô∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ @username
‚Ä¢ https://t.me/username
‚Ä¢ http://t.me/username
‚Ä¢ t.me/username

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</i>"""

        await send_or_edit_message(callback.message.chat.id, msg_id, text)
        data['users'][user_id]['current_screen'] = 'enter_channel'
        data['users'][user_id]['ad_period'] = period
        data['users'][user_id]['ad_type'] = type_
        save_data(data)
    elif cb_data == "edit_channel":
        item_text = {'channel': '–∫–∞–Ω–∞–ª', 'group': '–≥—Ä—É–ø–ø—É', 'bot': '–±–æ—Ç–∞', 'post': '–ø–æ—Å—Ç'}[type_]

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        examples = {
            'post': ("https://t.me/channel/123", "http://t.me/channel/123"),
            'bot': ("@myrentbot", "@myrentbot –∏–ª–∏ https://t.me/myrentbot"),
            'channel': ("@mychannel", "@mychannel –∏–ª–∏ https://t.me/mychannel"),
            'group': ("@mygroup", "@mygroup –∏–ª–∏ https://t.me/mygroup")
        }
        example, important_example = examples.get(type_, ("@example", "@example"))

        text = f"""‚úÖ –û–ø–ª–∞—Ç–∞ VANISH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

üí∞ –°–ø–∏—Å–∞–Ω–æ: {p['vanish']} VANISH
üí≥ –û—Å—Ç–∞—Ç–æ–∫: {data['users'][user_id]['balance']} VANISH

üéâ –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à {html.escape(item_text)}

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>
‚Ä¢ {html.escape(example)}
‚Ä¢ {html.escape(important_example)}

‚ö†Ô∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ @username
‚Ä¢ https://t.me/username
‚Ä¢ http://t.me/username
‚Ä¢ t.me/username

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</i>"""
        await send_or_edit_message(callback.message.chat.id, msg_id, text)
        # current_screen –æ—Å—Ç–∞–µ—Ç—Å—è enter_channel
    elif cb_data == "confirm_channel":
        period = data['users'][user_id]['ad_period']
        type_ = data['users'][user_id]['ad_type']
        data = load_data()
        expiry_hours = {'1d': 24, '1w': 168, '1m': 720}
        hours = expiry_hours[period]
        expiry = datetime.now() + timedelta(hours=hours)
        expiry_str = expiry.isoformat() if expiry else None
        if type_ == 'post':
            post = data['users'][user_id]['entered_post']
            post_key = f"{post['chat_id']}_{post['message_id']}"
            for group_id in data['groups']:
                data['groups'][group_id].setdefault('posts', {})[post_key] = {'chat_id': post['chat_id'], 'message_id': post['message_id'], 'expiry': expiry_str, 'people': 0}
            data['users'][user_id].setdefault('active_ads', []).append({'post': post, 'type': type_, 'period': period, 'expiry': expiry_str})
            item = f"{post['chat_id']}/{post['message_id']}"
        else:
            channel = data['users'][user_id]['entered_channel']
            for group_id in data['groups']:
                if channel not in data['groups'][group_id]['channels']:
                    data['groups'][group_id]['channels'][channel] = {'expiry': expiry_str, 'people': 0}
            data['users'][user_id].setdefault('active_ads', []).append({'channel': channel, 'type': type_, 'period': period, 'expiry': expiry_str})
            item = channel
        logging.info(f"Added active ad for {user_id}: {item}")
        save_data(data)
        type_name = {'channel': '–∫–∞–Ω–∞–ª–∞', 'group': '–≥—Ä—É–ø–ø—ã', 'bot': '–±–æ—Ç–∞', 'post': '–ø–æ—Å—Ç–∞'}[type_]
        await send_or_edit_message(callback.message.chat.id, msg_id, f"‚úÖ –†–µ–∫–ª–∞–º–∞ {type_name} {item} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {prices[type_][period]['period']}!", reply_markup=back_keyboard)
        data['users'][user_id]['current_screen'] = None
        del data['users'][user_id]['ad_period']
        del data['users'][user_id]['ad_type']
        if type_ == 'post':
            del data['users'][user_id]['entered_post']
        else:
            del data['users'][user_id]['entered_channel']
        save_data(data)
    elif cb_data == "channels":
        channels = data['users'][user_id]['channels']
        text = "üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n\n–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"
        if not channels:
            text += "\n–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for ch in channels:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {ch}", callback_data=f"delete_channel:{ch}")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=keyboard)
# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ –±–∞–ª–∞–Ω—Å–µ
    elif cb_data == "stats":
        total_users = data['stats']['total_users']
        users_today = data['stats'].get('users_today', 0)
        total_groups = len(data['groups'])
        await send_or_edit_message(callback.message.chat.id, msg_id, STATS_TEXT.format(total_users=total_users, users_today=users_today, total_groups=total_groups), reply_markup=back_keyboard, parse_mode="HTML")
    elif cb_data == "help":
        await send_or_edit_message(callback.message.chat.id, msg_id, HELP_TEXT, reply_markup=back_keyboard, parse_mode="HTML")
    elif cb_data == "my_subs":
        active_ads = data['users'][user_id].get('active_ads', [])
        # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ
        now = datetime.now()
        original_count = len(active_ads)
        active_ads[:] = [ad for ad in active_ads if not ad.get('expiry') or datetime.fromisoformat(ad['expiry']) > now]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if len(active_ads) != original_count:
            save_data(data)

        if not active_ads:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
        else:
            text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for ad in active_ads:
                if ad.get('expiry'):
                    expiry_dt = datetime.fromisoformat(ad['expiry'])
                    remaining = expiry_dt - now
                    days = remaining.days
                    hours, remainder = divmod(remaining.seconds, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    if days > 0:
                        time_str = f"{days} –¥ {hours} —á"
                    else:
                        time_str = f"{hours} —á {minutes} –º–∏–Ω"
                else:
                    time_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"
                type_name = {'channel': '–ö–∞–Ω–∞–ª', 'group': '–ì—Ä—É–ø–ø–∞', 'bot': '–ë–æ—Ç', 'post': '–ü–æ—Å—Ç'}.get(ad.get('type', 'channel'), '–ö–∞–Ω–∞–ª')
                if 'post' in ad:
                    item = f"{ad['post']['chat_id']}/{ad['post']['message_id']}"
                else:
                    item = ad.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text += f"‚Ä¢ {type_name}: {item} - –æ—Å—Ç–∞–ª–æ—Å—å {time_str}\n"
        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=back_keyboard)
    elif cb_data.startswith("delete_channel:"):
        channel = cb_data.split(":", 1)[1]
        if channel in data['users'][user_id]['channels']:
            data['users'][user_id]['channels'].remove(channel)
            save_data(data)
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        channels = data['users'][user_id]['channels']
        text = "üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n\n–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"
        if not channels:
            text += "\n–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for ch in channels:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {ch}", callback_data=f"delete_channel:{ch}")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await send_or_edit_message(callback.message.chat.id, msg_id, text, reply_markup=keyboard)

    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
@dp.message(Command("help"))
async def help_command(message: Message):
    if message.chat.type in ['group', 'supergroup']:
        # –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        if message.from_user.id != config.ADMIN_ID:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            try:
                user_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
                if user_member.status not in ['administrator', 'creator']:
                    await message.reply("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>\n\nüö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.\n\nüí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.", parse_mode="HTML")
                    return
            except Exception as e:
                await message.reply("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML")
                return

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
        help_text = """ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø:</b>

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
‚Ä¢ /setup @username –≤—Ä–µ–º—è - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /unsetup - –æ—Ç–≤—è–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ /unsetup @username - –æ—Ç–≤—è–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /setup @mychannel 1d
‚Ä¢ /unsetup @mychannel
‚Ä¢ /status

<i>–í—Ä–µ–º—è: –ª—é–±–æ–µ —á–∏—Å–ª–æ + h/d, –Ω–∞–ø—Ä–∏–º–µ—Ä 3h, 4d, –∏–ª–∏ never –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ</i>"""
        await message.reply(help_text, parse_mode="HTML")
    elif message.chat.type == 'private':
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await message.reply(HELP_TEXT, reply_markup=back_keyboard, parse_mode="HTML")
    return

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
@dp.message(lambda message: message.chat.type in ['group', 'supergroup'])
async def check_subscription(message: Message):

    logging.info(f"Checking subscription for user {message.from_user.id} in group {message.chat.id}")
    data = load_data()
    if message.from_user.id in data['admins']:
        return  # –ê–¥–º–∏–Ω—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è
    group_id = str(message.chat.id)
    if group_id not in data['groups']:
        data['groups'][group_id] = {'channels': {}, 'bots': {}}

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    bot_member = await bot.get_chat_member(message.chat.id, bot.id)
    if not bot_member.can_delete_messages:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        admins = await bot.get_chat_administrators(message.chat.id)
        for admin in admins:
            if admin.user.id != bot.id:
                try:
                    await bot.send_message(admin.user.id, f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {message.chat.title}. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ '–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –¥–ª—è –±–æ—Ç–∞.")
                except:
                    pass
        return  # –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å @likkerrochat –µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω
    if bot_member.status in ['administrator', 'creator'] and '@likkerrochat' not in data['groups'][group_id]['channels']:
        data['groups'][group_id]['channels']['@likkerrochat'] = {'expiry': None, 'people': 0}
        save_data(data)

    # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∫–∞–Ω–∞–ª—ã
    for channel in list(data['groups'][group_id]['channels'].keys()):
        expiry_str = data['groups'][group_id]['channels'][channel]['expiry']
        if expiry_str and datetime.fromisoformat(expiry_str) < datetime.now():
            del data['groups'][group_id]['channels'][channel]
            logging.info(f"Removed expired channel {channel} from group {group_id}")
    save_data(data)
    if not data['groups'][group_id]['channels']:
        return  # –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

    user_id = message.from_user.id
    for channel in data['groups'][group_id]['channels']:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            logging.info(f"User {user_id} status in {channel}: {member.status}")
            if member.status not in ['member', 'administrator', 'creator']:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}")]]
                )
                username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
                try:
                    await message.answer(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logging.error(f"Error sending subscription message: {e}")
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        await message.answer(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}",
                            reply_markup=keyboard
                        )
                    except:
                        pass
                return
        except Exception as e:
            logging.error(f"Error checking subscription for {channel}: {e}")
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª), –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
            continue
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ—Å—Ç–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
    # for post_key, post_info in data['groups'][group_id].get('posts', {}).items():
    #     ...

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
@dp.message()
async def handle_text(message: Message):
    if message.chat.type != 'private':
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥

    data = load_data()
    user_id = str(message.from_user.id)
    if user_id not in data['users']:
        return

    # –û–±–Ω–æ–≤–∏—Ç—å username
    data['users'][user_id]['username'] = message.from_user.username.lower() if message.from_user.username else None
    save_data(data)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω
    banned_until = data['users'][user_id].get('banned_until')
    if banned_until and datetime.fromisoformat(banned_until) > datetime.now():
        return
    
    msg_id = data['users'][user_id]['message_id']
    text = message.text.strip()
    
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await send_or_edit_message(message.chat.id, msg_id, START_TEXT, reply_markup=main_keyboard, parse_mode="HTML")
    elif text == "/admin":
        logging.info(f"User {message.from_user.id} sent /admin, username: {message.from_user.username}, is_admin: {message.from_user.id == config.ADMIN_ID or message.from_user.username == 'LIKKERRO'}")
        if message.from_user.id == config.ADMIN_ID or message.from_user.username == "LIKKERRO":
            data['users'][user_id]['current_screen'] = None  # –°–±—Ä–æ—Å
            save_data(data)
            await bot.send_message(message.chat.id, ADMIN_TEXT, reply_markup=admin_keyboard)
        else:
            await bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        balance = data['users'][user_id]['balance']
        ref_code = data['users'][user_id]['ref_code']
        bot_username = (await bot.get_me()).username
        await send_or_edit_message(message.chat.id, msg_id, BALANCE_TEXT.format(balance=balance, bot_username=bot_username, ref_code=ref_code), reply_markup=back_keyboard, parse_mode="HTML")
        data['users'][user_id]['current_screen'] = 'balance'
        save_data(data)
    elif text == "üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ TON" and data['users'][user_id].get('current_screen') == 'balance':
        deposit_text = """üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ TON (–º–∏–Ω–∏–º—É–º 0.1 TON = 10 –±–∞–ª–ª–æ–≤)

–ü—Ä–∏–º–µ—Ä: 0.5

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

‚Ü©Ô∏è –ù–∞–∑–∞–¥"""
        await send_or_edit_message(message.chat.id, msg_id, deposit_text)
        data['users'][user_id]['current_screen'] = 'deposit'
        save_data(data)
    elif data['users'][user_id].get('current_screen') == 'deposit' and text.replace('.', '').isdigit():
        try:
            amount_ton = float(text)
            if amount_ton < 0.1:
                await send_or_edit_message(message.chat.id, msg_id, "‚ùå –ú–∏–Ω–∏–º—É–º 0.1 TON")
                return
            balance_add = int(amount_ton * 100)  # 1 TON = 100 –±–∞–ª–ª–æ–≤
            # –°–∏–º—É–ª—è—Ü–∏—è: —Å—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª–∏—Ç—å
            add_balance(user_id, balance_add)
            await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance_add} –±–∞–ª–ª–æ–≤!")
        except:
            await send_or_edit_message(message.chat.id, msg_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
    elif text == "üì¢ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–∞—Ä":
        balance = data['users'][user_id]['balance']
        text_msg = f"""<b>üì¢ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å?</b>

üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} VANISH

üöÄ <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã –∏ —É–≤–µ–ª–∏—á—å—Ç–µ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é!</i>"""
        await send_or_edit_message(message.chat.id, msg_id, text_msg, reply_markup=pr_keyboard, parse_mode="HTML")
        data['users'][user_id]['current_screen'] = 'pr'
        save_data(data)
    elif text in ["1", "2", "3"] and data['users'][user_id].get('current_screen') == 'pr':
        costs = {'1': 10, '2': 5, '3': 2}
        cost = costs[text]
        if data['users'][user_id]['balance'] >= cost:
            data['users'][user_id]['balance'] -= cost
            save_data(data)
            await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ü–∏–∞—Ä –∑–∞–∫–∞–∑–∞–Ω! –°–ø–∏—Å–∞–Ω–æ {cost} –±–∞–ª–ª–æ–≤.")
        else:
            await send_or_edit_message(message.chat.id, msg_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ {cost}.")
    elif text.startswith("@") and data['users'][user_id].get('current_screen') == 'channels':
        channel = text
        if channel not in data['users'][user_id]['channels']:
            data['users'][user_id]['channels'].append(channel)
            save_data(data)
        await send_or_edit_message(message.chat.id, msg_id, CHANNELS_TEXT.format(channels="\n".join(data['users'][user_id]['channels'])), reply_markup=back_keyboard)
        try:
            await message.delete()
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
    elif text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and message.from_user.id == config.ADMIN_ID:
        stats = data['stats']
        text_stats = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['total_channels']}\n–û–±–æ—Ä–æ—Ç –±–∞–ª–ª–æ–≤: {stats['total_balance']}"
        await send_or_edit_message(message.chat.id, msg_id, text_stats)
    elif text == "üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤" and message.from_user.id == config.ADMIN_ID:
        await send_or_edit_message(message.chat.id, msg_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ: user_id amount")
        data['users'][user_id]['current_screen'] = 'admin_add_balance'
        save_data(data)
    elif text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and message.from_user.id == config.ADMIN_ID:
        await send_or_edit_message(message.chat.id, msg_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        data['users'][user_id]['current_screen'] = 'admin_block'
        save_data(data)
    elif text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" and message.from_user.id == config.ADMIN_ID:
        await send_or_edit_message(message.chat.id, msg_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        data['users'][user_id]['current_screen'] = 'admin_broadcast'
        save_data(data)
    elif text == "üîß –¢–∞—Ä–∏—Ñ—ã" and message.from_user.id == config.ADMIN_ID:
        await send_or_edit_message(message.chat.id, msg_id, "–¢–∞—Ä–∏—Ñ—ã: 1-10, 2-5, 3-2\n–ò–∑–º–µ–Ω–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ")
    elif text == "üë§ –ê–¥–º–∏–Ω—ã" and message.from_user.id == config.ADMIN_ID:
        admins = "\n".join(str(a) for a in data['admins'])
        await send_or_edit_message(message.chat.id, msg_id, f"–ê–¥–º–∏–Ω—ã:\n{admins}\n\n–î–æ–±–∞–≤–∏—Ç—å: user_id\n–£–¥–∞–ª–∏—Ç—å: -user_id")
        data['users'][user_id]['current_screen'] = 'admin_admins'
        save_data(data)
    elif data['users'][user_id].get('current_screen') == 'admin_add_balance' and message.from_user.id == config.ADMIN_ID:
        try:
            target_id, amount = text.split()
            amount = int(amount)
            if target_id in data['users']:
                data['users'][target_id]['balance'] += amount
                data['stats']['total_balance'] += amount
                save_data(data)
                await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            else:
                await bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    elif data['users'][user_id].get('current_screen') == 'admin_block' and message.from_user.id == config.ADMIN_ID:
        if text in data['users']:
            data['users'][text]['blocked'] = True
            save_data(data)
            await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {text} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif data['users'][user_id].get('current_screen') == 'admin_broadcast' and message.from_user.id == config.ADMIN_ID:
        for uid in data['users']:
            if not data['users'][uid].get('blocked'):
                try:
                    await bot.send_message(int(uid), f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{text}")
                except:
                    pass
        await send_or_edit_message(message.chat.id, msg_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    elif data['users'][user_id].get('current_screen') == 'admin_admins' and message.from_user.id == config.ADMIN_ID:
        if text.startswith('-'):
            aid = text[1:]
            if int(aid) in data['admins']:
                data['admins'].remove(int(aid))
                save_data(data)
                await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ê–¥–º–∏–Ω {aid} —É–¥–∞–ª—ë–Ω")
        elif text.isdigit():
            data['admins'].append(int(text))
            save_data(data)
            await send_or_edit_message(message.chat.id, msg_id, f"‚úÖ –ê–¥–º–∏–Ω {text} –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    elif text == "üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã":
        channels = data['users'][user_id]['channels']
        text = "üë• –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n\n–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"
        if not channels:
            text += "\n–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for ch in channels:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {ch}", callback_data=f"delete_channel:{ch}")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await send_or_edit_message(message.chat.id, msg_id, text, reply_markup=keyboard)
        data['users'][user_id]['current_screen'] = 'channels'
        save_data(data)
# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ –≤ –±–∞–ª–∞–Ω—Å–µ
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total_users = data['stats']['total_users']
        users_today = data['stats'].get('users_today', 0)
        total_groups = len(data['groups'])
        await send_or_edit_message(message.chat.id, msg_id, STATS_TEXT.format(total_users=total_users, users_today=users_today, total_groups=total_groups), reply_markup=back_keyboard, parse_mode="HTML")
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await send_or_edit_message(message.chat.id, msg_id, HELP_TEXT, reply_markup=back_keyboard, parse_mode="HTML")
    elif data.get('waiting_for_broadcast') and message.from_user.id == config.ADMIN_ID:
        data['broadcast_message'] = {'chat_id': message.chat.id, 'message_id': message.message_id}
        data['waiting_for_broadcast'] = False
        save_data(data)
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        msg = data['broadcast_message']
        for group_id in data['groups']:
            try:
                await bot.forward_message(chat_id=int(group_id), from_chat_id=msg['chat_id'], message_id=msg['message_id'])
            except Exception as e:
                logging.error(f"Error forwarding to {group_id}: {e}")
        await message.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–∑—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 2.5 –º–∏–Ω—É—Ç—ã.", parse_mode="HTML")
    elif data['users'][user_id].get('current_screen') == 'enter_channel':
        selected_type = data['users'][user_id].get('selected_type', '')

        if selected_type == 'post':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
            if not (text.startswith('https://t.me/') or text.startswith('http://t.me/')):
                await send_or_edit_message(message.chat.id, msg_id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\nüìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ https://t.me/channel/123\n‚Ä¢ http://t.me/channel/123\n\n<i>–ì–¥–µ 123 - –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è</i>", reply_markup=back_keyboard, parse_mode="HTML")
                return
            parts = text.replace('http://t.me/', '').replace('https://t.me/', '').split('/')
            if len(parts) != 2 or not parts[1].isdigit():
                await send_or_edit_message(message.chat.id, msg_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\nüìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\nhttps://t.me/channel/123\n\n<i>–ì–¥–µ:</i>\n‚Ä¢ <b>channel</b> - username –∫–∞–Ω–∞–ª–∞\n‚Ä¢ <b>123</b> - –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=back_keyboard, parse_mode="HTML")
                return
            channel = '@' + parts[0]
            message_id = int(parts[1])
            data['users'][user_id]['entered_post'] = {'chat_id': channel, 'message_id': message_id}
            text_msg = f"‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç: {html.escape(text)}\n\nüìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏</b> –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã.\n\n<i>–§–æ—Ä–º–∞—Ç: https://t.me/channel/123</i>"

        elif selected_type in ['channel', 'group', 'bot']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –≥—Ä—É–ø–ø –∏ –±–æ—Ç–æ–≤
            channel = text.strip()

            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if channel.startswith('@'):
                # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username
                pass
            elif channel.startswith('https://t.me/') or channel.startswith('http://t.me/'):
                # –°—Å—ã–ª–∫–∞ https://t.me/username
                channel = '@' + channel.split('/')[-1]
            elif channel.startswith('t.me/'):
                # –°—Å—ã–ª–∫–∞ t.me/username
                channel = '@' + channel.replace('t.me/', '')
            elif not channel.startswith('@'):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
                channel = '@' + channel

            data['users'][user_id]['entered_channel'] = channel
            channel_type = {'channel': '–∫–∞–Ω–∞–ª', 'group': '–≥—Ä—É–ø–ø—É', 'bot': '–±–æ—Ç'}[selected_type]
            text_msg = f"‚úÖ –í–∞—à {html.escape(channel_type)} –ø—Ä–∏–Ω—è—Ç: {html.escape(channel)}\n\nüìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å</b> –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã.\n\n<i>–ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'</i>"
        else:
            await send_or_edit_message(message.chat.id, msg_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard)
            return

        save_data(data)
        await send_or_edit_message(message.chat.id, msg_id, text_msg, reply_markup=confirm_channel_keyboard)
        try:
            await message.delete()
        except:
            pass

async def send_broadcast():
    while True:
        data = load_data()
        if 'broadcast_message' in data:
            msg = data['broadcast_message']
            for group_id in data['groups']:
                try:
                    await bot.forward_message(chat_id=int(group_id), from_chat_id=msg['chat_id'], message_id=msg['message_id'])
                except Exception as e:
                    logging.error(f"Error forwarding to {group_id}: {e}")
        await asyncio.sleep(150)  # 2.5 –º–∏–Ω—É—Ç—ã

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(send_broadcast())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())